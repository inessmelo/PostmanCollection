{
	"info": {
		"_postman_id": "b830bc06-e941-4453-9c38-b27ff125e602",
		"name": "ServerRest",
		"description": "README\n\n**O ServeRest é uma API REST gratuita que simula uma loja virtual com intuito de servir de material de estudos de testes de API.**\n\n**Não deixe de seguir o** [<b>autor do projeto</b>](https://github.com/PauloGoncalvesBH) **e deixar um star no repositório:** [<b>github.com/ServeRest/ServeRest</b>](https://github.com/ServeRest/ServeRest)\n\nEssa página documenta todas as rotas e como acessá-las. Para mais detalhes do ServeRest (como executar localmente utilizando Docker ou NPM, alterar timeout de autenticação, etc) acesse [o repositório do ServeRest](https://github.com/serverest/serverest).\n\nEstá utilizando Postman? Importe o [JSON do Swagger](https://raw.githubusercontent.com/ServeRest/ServeRest/trunk/docs/swagger.json) para ter acesso às collections.\n\nVai fazer teste de carga? Leia a seção '[Teste de Carga](https://github.com/ServeRest/ServeRest#teste-de-carga)'.\n\nMuito obrigado ♥ a todos que apoiam o projeto [financeiramente](https://opencollective.com/serverest#section-contributors) ou [com código, ideias e divulgação](https://github.com/ServeRest/ServeRest#contribuidores-), graças a vocês **mais de R$ 2000,00 foram doados para a ONG** [<b>Todas as letras</b>](https://todasasletras.org/) até o momento.\n\nO ServeRest possui um front, com status em beta, não deixe de conhecer: [front.serverest.dev](https://front.serverest.dev/).\n\nPrecisa de apoio? [Abra uma issue](https://github.com/ServeRest/ServeRest/issues) ou contate o mantenedor do projeto:\n\n[Paulo Gonçalves&nbsp;- Website](https://www.linkedin.com/in/paulo-goncalves/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "[CT001]Validar dados invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21e3bcc3-0c26-4635-a37f-40dbe3f2c79f",
								"exec": [
									"//RETORNO DO CODIGO E O STATUS\r",
									"pm.test(\"Status code retorna 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"//RETORNO DO RESPONSE\r",
									"pm.test(\"Exibe a msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Email e/ou senha inválidos\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1682b48f-5e40-4d42-8b4d-bec55fae590b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Authorization ",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"teste@qa.com\",\r\n    \"password\": \"abc123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL_ServerRest}}/login"
					},
					"response": []
				},
				{
					"name": "[CT002]]Validar campos em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed2063fa-c5b7-4393-a541-9323221ca1f5",
								"exec": [
									"//RETORNO DO CODIGO E O STATUS\r",
									"pm.test(\"Retorna o Status Code 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//RETORNO DO RESPONSE\r",
									"pm.test(\"Exibe a msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
									"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "11c56e4b-af3f-4535-98e2-110e654dfc6e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Nome",
								"value": "Authorization ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL_ServerRest}}/login"
					},
					"response": []
				},
				{
					"name": "[CT003]]Validar obrigatoriedade do campo email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45eb0795-951e-4091-b6a6-34246b1389cb",
								"exec": [
									"//RETORNO DO CODIGO E O STATUS\r",
									"pm.test(\"Retorna o Status Code 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//RETORNO DO RESPONSE\r",
									"pm.test(\"Exibe a msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f82b7be8-1417-431c-8bb1-e6e343054cb2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Nome",
								"value": "Authorization ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"1234567\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL_ServerRest}}/login"
					},
					"response": []
				},
				{
					"name": "[CT004]]Validar obrigatoriedade do campo password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed2063fa-c5b7-4393-a541-9323221ca1f5",
								"exec": [
									"//RETORNO DO CODIGO E O STATUS\r",
									"pm.test(\"Retorna o Status Code 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//RETORNO DO RESPONSE\r",
									"pm.test(\"Exibe a msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0d29c022-c3c9-4f97-8994-bae9bde8dc6f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Nome",
								"value": "Authorization ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"teste@teste.com\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL_ServerRest}}/login"
					},
					"response": []
				},
				{
					"name": "[CT005]]Validar email invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed2063fa-c5b7-4393-a541-9323221ca1f5",
								"exec": [
									"//RETORNO DO CODIGO E O STATUS\r",
									"pm.test(\"Retorna o Status Code 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//RETORNO DO RESPONSE\r",
									"pm.test(\"Exibe a msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email deve ser um email válido\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9b66d7b6-304e-4478-833a-86ef8c3167aa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Nome",
								"value": "Authorization ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"teste#qa.com\",\r\n    \"password\": \"abc123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL_ServerRest}}/login"
					},
					"response": []
				},
				{
					"name": "[CT006]]Validar password invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed2063fa-c5b7-4393-a541-9323221ca1f5",
								"exec": [
									"//RETORNO DO CODIGO E O STATUS\r",
									"pm.test(\"Retorna o Status Code 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"//RETORNO DO RESPONSE\r",
									"pm.test(\"Exibe a msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Email e/ou senha inválidos\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "85c1ddf6-394d-4817-93e9-6861aae4b368",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Nome",
								"value": "Authorization",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"teste@qa.com\",\r\n    \"password\": \"a\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL_ServerRest}}/login",
							"host": [
								"{{URL_ServerRest}}"
							],
							"path": [
								"login"
							],
							"query": [
								{
									"key": "name",
									"value": "Authorization ",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT007]]Validar login Admin com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed2063fa-c5b7-4393-a541-9323221ca1f5",
								"exec": [
									"let response = pm.response.json();\r",
									"let token_Admin = response.authorization;\r",
									"pm.globals.set(\"token_adm\", token_adm);\r",
									"\r",
									"//RETORNO DO CODIGO E O STATUS\r",
									"pm.test(\"Retorna o Status Code 200 Bad Request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//RETORNO DO RESPONSE\r",
									"pm.test(\"Exibe a msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "63753d94-9c19-4adc-9a11-3b20ca5b5cbd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "name",
								"value": "Authorization",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"teste@qa01.com\",\r\n    \"password\": \"testeqa1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL_ServerRest}}/login?Name=Authorization ",
							"host": [
								"{{URL_ServerRest}}"
							],
							"path": [
								"login"
							],
							"query": [
								{
									"key": "Name",
									"value": "Authorization "
								},
								{
									"key": "In",
									"value": "header",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT008]]Validar login nok Admin com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed2063fa-c5b7-4393-a541-9323221ca1f5",
								"exec": [
									"//RETORNO DO CODIGO E O STATUS\r",
									"pm.test(\"Retorna o Status Code 200 Bad Request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//RETORNO DO RESPONSE\r",
									"pm.test(\"Exibe a msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f38bf3e8-38b3-48c7-9b2d-fbe6a9767308",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "name",
								"value": "Authorization",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"naoadmin@teste.com\",\r\n    \"password\": \"naoadmin@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL_ServerRest}}/login?Name=Authorization ",
							"host": [
								"{{URL_ServerRest}}"
							],
							"path": [
								"login"
							],
							"query": [
								{
									"key": "Name",
									"value": "Authorization "
								},
								{
									"key": "In",
									"value": "header",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "78ea72f6-7ea6-413b-82ff-a2a403facfa3",
			"description": "Autentique o seu usuário para montar um carrinho e, se for administrador, gerenciar os produtosEndFragment\n\nLogin com sucesso\n\n\\--> Para efetuar o login com sucesso, deverá efetuar o cadstro de um usuário e em seguida efetuar o login com os dados necessários no body\n\nInforme o valor de `Authorization` retornado na rota _/login_\n\nName: `Authorization`\n\nIn: `header`\n\nEndFragment",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "34f6cc86-381f-4553-b5ee-2765e5bb4dad",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e1a8dbd2-268c-4503-b0b1-1cda34e153d8",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Usuários",
			"item": [
				{
					"name": "Buscar",
					"item": [
						{
							"name": "Cadastro de usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c1d3283-8612-442d-a796-f24d61e3e9b8",
										"exec": [
											"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
											"let response = pm.response.json();\r",
											"let id = response._id;\r",
											"pm.globals.set(\"id_user\", id);\r",
											"\r",
											"\r",
											"//===========================================\r",
											"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
											"let requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Pegar campos específicos do body\r",
											"let username = requestBody.nome;\r",
											"let email = requestBody.email;\r",
											"let password = requestBody.password;\r",
											"\r",
											"// Armazena em variáveis de ambiente\r",
											"pm.environment.set(\"nome_cad\", username);\r",
											"pm.environment.set(\"email_cad\", email);\r",
											"pm.environment.set(\"pass_cad\", password);\r",
											"\r",
											"// Log no console para conferir\r",
											"console.log(\"Nome salvo:\", username);\r",
											"console.log(\"Email salvo:\", email);\r",
											"console.log(\"Senha salvo:\", password);\r",
											"//========================================================\r",
											"\r",
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"    pm.expect(pm.response.text()).to.include(\"_id\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7bd65298-a1cc-48b3-8c29-0f7e19f3bdc7",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "37a6b0b6-6c18-4619-96c6-a5587b4b005c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios"
							},
							"response": []
						},
						{
							"name": "[CT001]Buscar usuário por ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9ee994e-15db-4ed0-a3df-c2b5e9ce97a3",
										"exec": [
											"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
											"let response = pm.response.json();\r",
											"let name = response.usuarios.nome;\r",
											"let email = response.usuarios.email;\r",
											"let pass = response.usuarios.password;\r",
											"pm.globals.set(\"nome_busca\", name);\r",
											"pm.globals.set(\"email_busca\", email);\r",
											"pm.globals.set(\"senha_busca\", pass);\r",
											"\r",
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has 'quantidade' and 'usuarios' properties\", function () {\r",
											"    pm.expect(response).to.have.property('quantidade');\r",
											"    pm.expect(response).to.have.property('usuarios');\r",
											"});\r",
											"\r",
											"// Test for 'quantidade' being a number\r",
											"pm.test(\"'quantidade' is a number\", function () {\r",
											"    pm.expect(response.quantidade).to.be.a('number');\r",
											"});\r",
											"\r",
											"// Test for 'usuarios' being an array\r",
											"pm.test(\"'usuarios' is an array\", function () {\r",
											"    pm.expect(response.usuarios).to.be.an('array');\r",
											"});\r",
											"\r",
											"// Test for each user object in 'usuarios' array\r",
											"response.usuarios.forEach((user) => {\r",
											"    pm.test(\"User object has required properties\", function () {\r",
											"        pm.expect(user).to.have.property('nome');\r",
											"        pm.expect(user).to.have.property('email');\r",
											"        pm.expect(user).to.have.property('password');\r",
											"        pm.expect(user).to.have.property('administrador');\r",
											"        pm.expect(user).to.have.property('_id');\r",
											"    });\r",
											"    \r",
											"    // Test for 'nome' and 'email' being strings\r",
											"    pm.test(\"'nome' and 'email' are strings\", function () {\r",
											"        pm.expect(user.nome).to.be.a('string');\r",
											"        pm.expect(user.email).to.be.a('string');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "94642a8d-6449-4ea0-8064-42fa8c004e3a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios?_id={{id_user}}",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{id_user}}"
										},
										{
											"key": "nome",
											"value": "Teste QA001",
											"disabled": true
										},
										{
											"key": "email",
											"value": "teste@qa01.com",
											"disabled": true
										},
										{
											"key": "password",
											"value": "testeqa1234",
											"type": "text",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "true",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT002]Buscar usuário por email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9ee994e-15db-4ed0-a3df-c2b5e9ce97a3",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"// Validate response body structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has required fields\", function () {\r",
											"    pm.expect(response).to.have.property(\"quantidade\");\r",
											"    pm.expect(response).to.have.property(\"usuarios\").that.is.an(\"array\");\r",
											"    pm.expect(response.quantidade).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"// Validate user data within the usuarios array\r",
											"response.usuarios.forEach(user => {\r",
											"    pm.test(\"User has required fields\", function () {\r",
											"        pm.expect(user).to.have.property(\"nome\").that.is.a(\"string\");\r",
											"        pm.expect(user).to.have.property(\"email\").that.is.a(\"string\");\r",
											"        pm.expect(user).to.have.property(\"password\").that.is.a(\"string\");\r",
											"        pm.expect(user).to.have.property(\"administrador\").that.is.a(\"string\");\r",
											"        pm.expect(user).to.have.property(\"_id\").that.is.a(\"string\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a8fe8d0d-6be9-4f95-873b-04c942067714",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "56584621-71ba-46b1-8430-634502d5128b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios?email={{email_cad}}",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{id_user}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "{{nome_busca}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "email",
											"value": "{{email_cad}}"
										},
										{
											"key": "password",
											"value": "{{senha_busca}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "true",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT003]Buscar usuário por nome",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9ee994e-15db-4ed0-a3df-c2b5e9ce97a3",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has 'quantidade' and 'usuarios'\", function () {\r",
											"    pm.expect(response).to.have.property(\"quantidade\");\r",
											"    pm.expect(response).to.have.property(\"usuarios\");\r",
											"});\r",
											"\r",
											"// Validate 'quantidade' is a number\r",
											"pm.test(\"'quantidade' is a number\", function () {\r",
											"    pm.expect(response.quantidade).to.be.a('number');\r",
											"});\r",
											"\r",
											"// Validate 'usuarios' is an array\r",
											"pm.test(\"'usuarios' is an array\", function () {\r",
											"    pm.expect(response.usuarios).to.be.an('array');\r",
											"});\r",
											"\r",
											"// Validate each user object in 'usuarios' array\r",
											"response.usuarios.forEach(user => {\r",
											"    pm.test(\"User has required properties\", function () {\r",
											"        pm.expect(user).to.have.all.keys(\"nome\", \"email\", \"password\", \"administrador\", \"_id\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6151c295-2785-4d8b-b761-82466ad5e20a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios?nome={{nome_cad}}",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{id_user}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "{{nome_cad}}"
										},
										{
											"key": "email",
											"value": "{{email_cad}}",
											"disabled": true
										},
										{
											"key": "password",
											"value": "{{pass_cad}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "true",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT004]Buscar usuário por senha",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9ee994e-15db-4ed0-a3df-c2b5e9ce97a3",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"// Check response structure\r",
											"pm.test(\"Response has 'quantidade' and 'usuarios' properties\", function () {\r",
											"    pm.expect(response).to.have.property('quantidade');\r",
											"    pm.expect(response).to.have.property('usuarios');\r",
											"});\r",
											"\r",
											"// Validate 'quantidade' is a number\r",
											"pm.test(\"'quantidade' is a number\", function () {\r",
											"    pm.expect(response.quantidade).to.be.a('number');\r",
											"});\r",
											"\r",
											"// Check 'usuarios' is an array\r",
											"pm.test(\"'usuarios' is an array\", function () {\r",
											"    pm.expect(response.usuarios).to.be.an('array');\r",
											"});\r",
											"\r",
											"// Validate each user object in 'usuarios' array\r",
											"response.usuarios.forEach((usuario) => {\r",
											"    pm.test(\"Each user has required properties\", function () {\r",
											"        pm.expect(usuario).to.have.property('nome');\r",
											"        pm.expect(usuario).to.have.property('email');\r",
											"        pm.expect(usuario).to.have.property('password');\r",
											"        pm.expect(usuario).to.have.property('administrador');\r",
											"        pm.expect(usuario).to.have.property('_id');\r",
											"    });\r",
											"\r",
											"    // Validate 'nome' and 'email' are strings\r",
											"    pm.test(\"User 'nome' and 'email' are strings\", function () {\r",
											"        pm.expect(usuario.nome).to.be.a('string');\r",
											"        pm.expect(usuario.email).to.be.a('string');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "1966421f-e5d3-4f0f-b6b9-5d2c181082f6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios?password={{pass_cad}}",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{id_user}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "{{nome_cad}}",
											"disabled": true
										},
										{
											"key": "email",
											"value": "{{email_cad}}",
											"disabled": true
										},
										{
											"key": "password",
											"value": "{{pass_cad}}"
										},
										{
											"key": "administrador",
											"value": "true",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT005]Buscar usuário por adminitrador",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9ee994e-15db-4ed0-a3df-c2b5e9ce97a3",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"// Test for response structure and properties\r",
											"pm.test(\"Response structure is valid\", function () {\r",
											"    pm.expect(response).to.have.all.keys('quantidade', 'usuarios');\r",
											"    pm.expect(response.quantidade).to.be.a('number');\r",
											"    pm.expect(response.usuarios).to.be.an('array');\r",
											"});\r",
											"\r",
											"// Test for each user in the usuarios array\r",
											"response.usuarios.forEach(user => {\r",
											"    pm.test(\"User object has required properties\", function () {\r",
											"        pm.expect(user).to.have.all.keys('nome', 'email', 'password', 'administrador', '_id');\r",
											"        pm.expect(user.nome).to.be.a('string');\r",
											"        pm.expect(user.email).to.be.a('string');\r",
											"        pm.expect(user.password).to.be.a('string');\r",
											"        pm.expect(user.administrador).to.be.a('string');\r",
											"        pm.expect(user._id).to.be.a('string');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e69fb293-f683-4f3c-b2be-b3980be7993a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios?administrador=true",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "4alroLhKVkNX177y",
											"type": "text",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "Teste QA001",
											"disabled": true
										},
										{
											"key": "email",
											"value": "teste@qa01.com",
											"disabled": true
										},
										{
											"key": "password",
											"value": "testeqa1234",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT006]Buscar usuário com ID invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f71bc18a-aa9a-4a27-9375-d17795153c67",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"0\");\r",
											"});\r",
											"\r",
											"// Validate response body structure\r",
											"pm.test(\"Response body has expected structure\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.all.keys('quantidade', 'usuarios');\r",
											"    pm.expect(response.quantidade).to.be.a('number');\r",
											"    pm.expect(response.usuarios).to.be.an('array');\r",
											"});\r",
											"\r",
											"// Check 'usuarios' array is empty\r",
											"pm.test(\"Usuarios array is empty\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.usuarios).to.have.lengthOf(0);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "0e776e20-ffac-483d-b936-13501b52f9a0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios?_id=AAAaaaaa",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "AAAaaaaa"
										},
										{
											"key": "nome",
											"value": "Teste QA001",
											"disabled": true
										},
										{
											"key": "email",
											"value": "teste@qa01.com",
											"disabled": true
										},
										{
											"key": "password",
											"value": "testeqa1234",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT007]Buscar usuário com nome invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f71bc18a-aa9a-4a27-9375-d17795153c67",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"0\");\r",
											"});\r",
											"\r",
											"// Validate response body structure\r",
											"pm.test(\"Response body has the correct structure\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.all.keys('quantidade', 'usuarios');\r",
											"    pm.expect(response.quantidade).to.be.a('number');\r",
											"    pm.expect(response.usuarios).to.be.an('array');\r",
											"});\r",
											"\r",
											"// Ensure the 'usuarios' array is empty\r",
											"pm.test(\"Usuarios array is empty\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.usuarios).to.have.lengthOf(0);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "2780f0dc-2d2e-4194-9c71-0af41fe71760",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios?nome=AAAaaaaa",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "AAAaaaaa"
										},
										{
											"key": "email",
											"value": "AAAaaaaa@qa01.com",
											"disabled": true
										},
										{
											"key": "password",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "AAAaaaaa",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT008]Buscar usuário com email invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f71bc18a-aa9a-4a27-9375-d17795153c67",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"0\");\r",
											"});\r",
											"\r",
											"// Check the response time is less than 200ms\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Validate the response body structure\r",
											"pm.test(\"Response body has expected structure\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.all.keys('quantidade', 'usuarios');\r",
											"    pm.expect(response.quantidade).to.be.a('number');\r",
											"    pm.expect(response.usuarios).to.be.an('array');\r",
											"});\r",
											"\r",
											"// Check that the \"quantidade\" field is equal to 0\r",
											"pm.test(\"Quantidade is 0\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.quantidade).to.equal(0);\r",
											"});\r",
											"\r",
											"// Verify the \"usuarios\" array is empty\r",
											"pm.test(\"Usuarios array is empty\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.usuarios).to.have.lengthOf(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "4ce8c193-cc03-4896-ba40-0d4d54db1dc6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios?email=AAAaaaaa@qa01.com",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "email",
											"value": "AAAaaaaa@qa01.com"
										},
										{
											"key": "password",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "AAAaaaaa",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT009]Buscar usuário com password invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f71bc18a-aa9a-4a27-9375-d17795153c67",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"0\");\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Test for response body structure\r",
											"pm.test(\"Response body contains expected properties\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property('quantidade');\r",
											"    pm.expect(response).to.have.property('usuarios');\r",
											"});\r",
											"\r",
											"// Test for quantidade being a number\r",
											"pm.test(\"Quantidade is a number\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.quantidade).to.be.a('number');\r",
											"});\r",
											"\r",
											"// Test for usuarios being an array\r",
											"pm.test(\"Usuarios is an array\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.usuarios).to.be.an('array');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "621a7408-7ba9-4d9e-8307-5c4290fdc48e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios?password=AAAaaaaa",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "email",
											"value": "AAAaaaaa@qa01.com",
											"disabled": true
										},
										{
											"key": "password",
											"value": "AAAaaaaa"
										},
										{
											"key": "administrador",
											"value": "AAAaaaaa",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT010]Buscar usuário com administrador invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f71bc18a-aa9a-4a27-9375-d17795153c67",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"administrador deve ser 'true' ou 'false'\");\r",
											"});\r",
											"\r",
											"// Check response time is less than 300ms\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Validate response body structure\r",
											"pm.test(\"Response body has expected properties\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"administrador\");\r",
											"    pm.expect(response.administrador).to.be.a('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "dbd94b56-317c-4150-be38-c08f88bc6fa2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios?administrador=AAAaaaaa",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "email",
											"value": "AAAaaaaa@qa01.com",
											"disabled": true
										},
										{
											"key": "password",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "AAAaaaaa"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "dd2ccb6d-1cf2-45f4-a80c-939773ea9c94",
					"description": "Requisição para gerenciarmento dos usuários, consulta de dados para login com cadastro via administrador"
				},
				{
					"name": "Cadastrar",
					"item": [
						{
							"name": "[CT001]Validar campos em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c1d3283-8612-442d-a796-f24d61e3e9b8",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
											"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
											"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");\r",
											"    pm.expect(pm.response.text()).to.include(\"administrador deve ser 'true' ou 'false'\");\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Validate the structure of the response body\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response body has required properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"nome\");\r",
											"    pm.expect(response).to.have.property(\"email\");\r",
											"    pm.expect(response).to.have.property(\"password\");\r",
											"    pm.expect(response).to.have.property(\"administrador\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "28c1f3f3-741d-4662-b660-eea62b598c30",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"\",\r\n    \"email\": \"\",\r\n    \"password\": \"\",\r\n    \"administrador\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios"
							},
							"response": []
						},
						{
							"name": "[CT002]Validar obrigatoriedade do campo nome",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c1d3283-8612-442d-a796-f24d61e3e9b8",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"// Check response time is less than 300ms\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Validate the response structure\r",
											"pm.test(\"Response body should have the 'nome' property\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property('nome');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "54a3b328-dcca-4667-8726-7cb0c5c866f5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios"
							},
							"response": []
						},
						{
							"name": "[CT003]Validar obrigatoriedade do campo email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c1d3283-8612-442d-a796-f24d61e3e9b8",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has expected properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"email\");\r",
											"});\r",
											"\r",
											"// Validate the email property type\r",
											"pm.test(\"Email property is a string\", function () {\r",
											"    pm.expect(response.email).to.be.a('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c5fb0d39-da60-44ac-b378-eb2b0d2b8cea",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios"
							},
							"response": []
						},
						{
							"name": "[CT004]Validar obrigatoriedade do campo password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c1d3283-8612-442d-a796-f24d61e3e9b8",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check response body structure\r",
											"pm.test(\"Response body has 'password' property\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"password\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "90f8c718-2f5c-4cce-a7e0-326876cf975c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios"
							},
							"response": []
						},
						{
							"name": "[CT005]Validar obrigatoriedade do campo administrador",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c1d3283-8612-442d-a796-f24d61e3e9b8",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"administrador deve ser 'true' ou 'false'\");\r",
											"});\r",
											"// Check response time is less than 300ms\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"pm.test(\"Response has expected properties\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"administrador\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ee1acf2a-733a-411e-8386-5cb43b6ddfcd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios"
							},
							"response": []
						},
						{
							"name": "[CT006]Validar email invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c1d3283-8612-442d-a796-f24d61e3e9b8",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email deve ser um email válido\");\r",
											"});\r",
											"\r",
											"// Validate the response time is within acceptable limits\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Validate the structure of the response body\r",
											"pm.test(\"Response body has expected properties\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"email\");\r",
											"    pm.expect(response.email).to.be.a('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ebab3748-f412-4a0f-b5e8-53ba4e5916ff",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"teste###qa.com\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios"
							},
							"response": []
						},
						{
							"name": "[CT007]Validar email ja cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c1d3283-8612-442d-a796-f24d61e3e9b8",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Este email já está sendo usado\");\r",
											"});\r",
											"\r",
											"// Check the response time\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Validate the structure of the response body\r",
											"pm.test(\"Response body has the correct structure\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"    pm.expect(response.message).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "3f35a3dd-6fba-4a30-bed0-1f781dbd3c6b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"email@usado.com\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios"
							},
							"response": []
						},
						{
							"name": "[CT008]Validar administrador invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c1d3283-8612-442d-a796-f24d61e3e9b8",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"administrador deve ser 'true' ou 'false'\");\r",
											"});\r",
											"\r",
											"// Check response structure\r",
											"pm.test(\"Response should be a valid JSON object\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Check for the presence of the 'administrador' field in the response\r",
											"pm.test(\"Response should contain 'administrador' field\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"administrador\");\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time should be less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "7f2a1193-6442-4547-a2ac-0a52b8a4b646",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"algo\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios"
							},
							"response": []
						},
						{
							"name": "[CT009]Validar cadastro de usuário como Admin com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c1d3283-8612-442d-a796-f24d61e3e9b8",
										"exec": [
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Check response time is within acceptable limits\r",
											"pm.test(\"Response time is less than 400ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
											"});\r",
											"\r",
											"// Validate the structure of the response body\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response body has required properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"    pm.expect(response).to.have.property(\"_id\");\r",
											"});\r",
											"\r",
											"// Validate the message property\r",
											"pm.test(\"Message property is correct\", function () {\r",
											"    pm.expect(response.message).to.equal(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"// Validate the _id property is a string\r",
											"pm.test(\"_id is a string\", function () {\r",
											"    pm.expect(response._id).to.be.a('string');\r",
											"});//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"    pm.expect(pm.response.text()).to.include(\"_id\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "98bad921-679b-4196-af49-a641001726a9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios"
							},
							"response": []
						},
						{
							"name": "[CT010]Validar cadastro de usuário sem Admin com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c1d3283-8612-442d-a796-f24d61e3e9b8",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"    pm.expect(pm.response.text()).to.include(\"_id\");\r",
											"});\r",
											"\r",
											"// Check response status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"// Validate response time\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Parse response body\r",
											"const response = pm.response.json();\r",
											"\r",
											"// Validate message property in response\r",
											"pm.test(\"Response should contain message property\", function () {\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"    pm.expect(response.message).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"// Validate _id property in response\r",
											"pm.test(\"Response should contain _id property\", function () {\r",
											"    pm.expect(response).to.have.property(\"_id\");\r",
											"    pm.expect(response._id).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "1100aa52-a3d4-42ff-9841-a294291cf9b2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios"
							},
							"response": []
						}
					],
					"id": "2544e1af-abb0-48d2-98dd-e0fd1757aa2d"
				},
				{
					"name": "Editar",
					"item": [
						{
							"name": "Cadastro de usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c1d3283-8612-442d-a796-f24d61e3e9b8",
										"exec": [
											"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
											"let response = pm.response.json();\r",
											"let id = response._id;\r",
											"pm.globals.set(\"id_user_edit\", id);\r",
											"\r",
											"\r",
											"//===========================================\r",
											"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
											"let requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Pegar campos específicos do body\r",
											"let username = requestBody.nome;\r",
											"let email = requestBody.email;\r",
											"let password = requestBody.password;\r",
											"let adm = requestBody.administrador;\r",
											"\r",
											"// Armazena em variáveis de ambiente\r",
											"pm.environment.set(\"nome_edit\", username);\r",
											"pm.environment.set(\"email_edit\", email);\r",
											"pm.environment.set(\"pass_edit\", password);\r",
											"pm.environment.set(\"adm_edit\", adm);\r",
											"\r",
											"// Log no console para conferir\r",
											"console.log(\"Nome salvo:\", username);\r",
											"console.log(\"Email salvo:\", email);\r",
											"console.log(\"Senha salvo:\", password);\r",
											"console.log(\"Admin salvo\", adm);\r",
											"//========================================================\r",
											"\r",
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"    pm.expect(pm.response.text()).to.include(\"_id\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7bd65298-a1cc-48b3-8c29-0f7e19f3bdc7",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d00bc1f8-2748-4eba-a67b-de4346fa6119",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios"
							},
							"response": []
						},
						{
							"name": "[CT001]Editar nome com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0c5817d-46ae-4546-8f7b-5c1e0437fa73",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has a message property\", function () {\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "57da889a-b0ff-475b-9dfc-5c83e44df08a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{email_edit}}\",\r\n    \"password\": \"{{pass_edit}}\",\r\n    \"administrador\": \"{{adm_edit}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios/{{id_user_edit}}"
							},
							"response": []
						},
						{
							"name": "[CT002]Editar email com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0c5817d-46ae-4546-8f7b-5c1e0437fa73",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Check response body structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response body has a message property\", function () {\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "48cea338-7a26-4e08-bb8f-14c0d6043831",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{nome_edit}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{pass_edit}}\",\r\n    \"administrador\": \"{{adm_edit}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios/{{id_user_edit}}"
							},
							"response": []
						},
						{
							"name": "[CT003]Editar senha com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0c5817d-46ae-4546-8f7b-5c1e0437fa73",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"pm.test(\"Response should have 'message' property\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property('message');\r",
											"});\r",
											"\r",
											"// Validate 'message' property type\r",
											"pm.test(\"Message should be a string\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.be.a('string');\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response time\r",
											"pm.test(\"Response time should be less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "879ede84-67f6-4088-829d-5159f33a9920",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"Teste Editar\",\r\n    \"email\": \"editar@teste.com.br\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios/{{id_user_edit}}"
							},
							"response": []
						},
						{
							"name": "[CT004]Editar status Adim pra false",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0c5817d-46ae-4546-8f7b-5c1e0437fa73",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"\r",
											"// Check response time is less than 300ms\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has message property\", function () {\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"    pm.expect(response.message).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "100be7ef-663a-4d7a-9f9e-caacd9f1db76",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{nome_edit}}\",\r\n    \"email\": \"{{email_edit}}\",\r\n    \"password\": \"{{pass_edit}}\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios/{{id_user_edit}}"
							},
							"response": []
						},
						{
							"name": "[CT005]Editar status Adim pra true",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0c5817d-46ae-4546-8f7b-5c1e0437fa73",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Parse response body\r",
											"const response = pm.response.json();\r",
											"\r",
											"// Check if message property exists\r",
											"pm.test(\"Response has message property\", function () {\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate message property type\r",
											"pm.test(\"Message property is a string\", function () {\r",
											"    pm.expect(response.message).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "bff8c98e-2662-47d3-9662-f6bf6c12a646",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{nome_edit}}\",\r\n    \"email\": \"{{email_edit}}\",\r\n    \"password\": \"{{pass_edit}}\",\r\n    \"administrador\": \"{{adm_edit}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios/{{id_user_edit}}"
							},
							"response": []
						},
						{
							"name": "[CT006]Editar todos os campos",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0c5817d-46ae-4546-8f7b-5c1e0437fa73",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"\r",
											"// Check the response time\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"// Validate the response body structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response body has the correct structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"    pm.expect(response.message).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6d02ac50-9a8a-4d79-bba7-250c498aaf8a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios/{{id_user_edit}}"
							},
							"response": []
						},
						{
							"name": "[CT007]Editar usuário não encontrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0c5817d-46ae-4546-8f7b-5c1e0437fa73",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"// Check response time is less than 300ms\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Validate response body structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response body has required properties\", function () {\r",
											"    pm.expect(response).to.have.all.keys(\"message\", \"_id\");\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "14d0b831-227e-4df4-b6ce-4caecdc99051",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios/naoendocntrado@11155"
							},
							"response": []
						}
					],
					"id": "4c817c46-abe1-4312-85b7-4f9db9796733"
				},
				{
					"name": "Excluir",
					"item": [
						{
							"name": "Cadastro de usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c1d3283-8612-442d-a796-f24d61e3e9b8",
										"exec": [
											"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
											"let response = pm.response.json();\r",
											"let id = response._id;\r",
											"pm.globals.set(\"id_user_exc\", id);\r",
											"\r",
											"\r",
											"//===========================================\r",
											"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
											"let requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Pegar campos específicos do body\r",
											"let username = requestBody.nome;\r",
											"let email = requestBody.email;\r",
											"let password = requestBody.password;\r",
											"let adm = requestBody.administrador;\r",
											"\r",
											"// Armazena em variáveis de ambiente\r",
											"pm.environment.set(\"nome_exc\", username);\r",
											"pm.environment.set(\"email_exc\", email);\r",
											"pm.environment.set(\"pass_exc\", password);\r",
											"pm.environment.set(\"adm_exc\", adm);\r",
											"\r",
											"// Log no console para conferir\r",
											"console.log(\"Nome salvo:\", username);\r",
											"console.log(\"Email salvo:\", email);\r",
											"console.log(\"Senha salvo:\", password);\r",
											"console.log(\"Admin salvo\", adm);\r",
											"//========================================================\r",
											"\r",
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"    pm.expect(pm.response.text()).to.include(\"_id\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7bd65298-a1cc-48b3-8c29-0f7e19f3bdc7",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "31c094d8-2501-4011-9d11-9965af08ca9c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios"
							},
							"response": []
						},
						{
							"name": "[CT001]Excluir usuário nao existente por ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9ee994e-15db-4ed0-a3df-c2b5e9ce97a3",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"// Check the response time is less than 400ms\r",
											"pm.test(\"Response time is less than 400ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Verify that the response body has a message property\r",
											"pm.test(\"Response body has a message property\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "aff3a37f-78cd-4ec0-8742-1a4df83ab2fe",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios?_id={{id_user_exc}}",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{id_user_exc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT002]Excluir usuário Nome",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9ee994e-15db-4ed0-a3df-c2b5e9ce97a3",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"// Verify the response status code\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(405);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate the response body structure\r",
											"const responseBody = pm.response.json();\r",
											"pm.test(\"Response body has message property\", function () {\r",
											"    pm.expect(responseBody).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Check that the message property is a string\r",
											"pm.test(\"Message property is a string\", function () {\r",
											"    pm.expect(responseBody.message).to.be.a('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "68425752-1979-4ab0-9267-d4a960ff39a6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios?nome={{nome_exc}}",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "nome",
											"value": "{{nome_exc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT003]Excluir usuário por Função Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9ee994e-15db-4ed0-a3df-c2b5e9ce97a3",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"// Check the response status code\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(405);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"const responseBody = pm.response.json();\r",
											"\r",
											"// Check if the message property exists\r",
											"pm.test(\"Response has message property\", function () {\r",
											"    pm.expect(responseBody).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Check if the message is a string\r",
											"pm.test(\"Message is a string\", function () {\r",
											"    pm.expect(responseBody.message).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a5456c86-fac0-4263-bebc-8c09981bb92a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios?administrador={{adm_exc}}",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "administrador",
											"value": "{{adm_exc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT004]Excluir usuário por senha",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9ee994e-15db-4ed0-a3df-c2b5e9ce97a3",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"// Test for successful response status code\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(405);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d12dfc06-873e-4935-aefa-f71e43e84e3b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios?password={{pass_exc}}",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "password",
											"value": "{{pass_exc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT005]Excluir usuário por email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9ee994e-15db-4ed0-a3df-c2b5e9ce97a3",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response body structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response body has a message property\", function () {\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Check that the message is a string\r",
											"pm.test(\"Message is a string\", function () {\r",
											"    pm.expect(response.message).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d50ae8a7-c711-42ba-9dfc-e7817947a0dd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios?email={{email_exc}}",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "email",
											"value": "{{email_exc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT006]Excluir usuário existente por ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9ee994e-15db-4ed0-a3df-c2b5e9ce97a3",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
											"});\r",
											"\r",
											"// Check response status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate message in response body\r",
											"pm.test(\"Response message is correct\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.exist;\r",
											"    pm.expect(response.message).to.equal(\"Registro excluído com sucesso\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dc8f5cf8-b513-4ac2-bafd-dea10adff1d3",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "bdbc8f22-c1c4-47a4-91bc-69dc6caffd32",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios/{{id_user_exc}}"
							},
							"response": []
						},
						{
							"name": "[CT007]Excluir usuário nao encontrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9ee994e-15db-4ed0-a3df-c2b5e9ce97a3",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Nenhum registro excluído\");\r",
											"});\r",
											"\r",
											"// Check response time is less than 500ms\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Check if response body has the expected message structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response body has message property\", function () {\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"    pm.expect(response.message).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dc8f5cf8-b513-4ac2-bafd-dea10adff1d3",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d3d27f4c-1825-4c1b-aa4a-51b2d2224cda",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios/{{id_user_exc}}"
							},
							"response": []
						},
						{
							"name": "[CT008]Excluir usuário com dados no carrinho",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9ee994e-15db-4ed0-a3df-c2b5e9ce97a3",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Não é permitido excluir usuário com carrinho cadastrado\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dc8f5cf8-b513-4ac2-bafd-dea10adff1d3",
										"exec": [
											"pm.environment.set(\"{{registro_id}}\", \"{{id}}\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b6be1bde-7905-4084-8ee9-03dbc88a63c1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios/{{id}}"
							},
							"response": []
						}
					],
					"id": "38c92192-adb4-49a7-9777-02eb251ea614"
				}
			],
			"id": "a96d30f0-3826-4938-832a-a51539f23833"
		},
		{
			"name": "Produtos",
			"item": [
				{
					"name": "Cadastrar",
					"item": [
						{
							"name": "[CT001]Validar token de acesso ausente",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3b675d4-bcc6-4c32-a01d-225d310ddcd1",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
											"});\r",
											"\r",
											"// Check the response time is less than 300ms\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate the structure of the response body\r",
											"pm.test(\"Response body has a message property\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"    pm.expect(response.message).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "08e8fec2-a830-463c-9a28-a51195b24923",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"\",\r\n    \"preco\": \"\",\r\n    \"descricao\": \"\",\r\n    \"quantidade\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/produtos"
							},
							"response": []
						},
						{
							"name": "Cadastrar usuário não Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c1d3283-8612-442d-a796-f24d61e3e9b8",
										"exec": [
											"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
											"let response = pm.response.json();\r",
											"let id = response._id;\r",
											"pm.globals.set(\"id_user_nAdm\", id);\r",
											"\r",
											"\r",
											"//===========================================\r",
											"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
											"let requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Pegar campos específicos do body\r",
											"let username = requestBody.nome;\r",
											"let email = requestBody.email;\r",
											"let password = requestBody.password;\r",
											"let adm = requestBody.administrador;\r",
											"\r",
											"// Armazena em variáveis de ambiente\r",
											"pm.environment.set(\"nome_nAdm\", username);\r",
											"pm.environment.set(\"email_nAdm\", email);\r",
											"pm.environment.set(\"pass_nAdm\", password);\r",
											"pm.environment.set(\"adm_nAdm\", adm);\r",
											"\r",
											"// Log no console para conferir\r",
											"console.log(\"Nome salvo:\", username);\r",
											"console.log(\"Email salvo:\", email);\r",
											"console.log(\"Senha salvo:\", password);\r",
											"console.log(\"Admin salvo\", adm);\r",
											"//========================================================\r",
											"\r",
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"    pm.expect(pm.response.text()).to.include(\"_id\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7bd65298-a1cc-48b3-8c29-0f7e19f3bdc7",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "0ade285c-7e10-4d33-9f68-0d56c1af74f8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios"
							},
							"response": []
						},
						{
							"name": "Logar com usuario não Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed2063fa-c5b7-4393-a541-9323221ca1f5",
										"exec": [
											"// Converte o response em JSON\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Supondo que o token venha como \"Bearer xxxxxxx\"\r",
											"let rawToken = response.authorization;\r",
											"\r",
											"// Remove o prefixo \"Bearer \" se existir\r",
											"let token = rawToken ? rawToken.replace(/^Bearer\\s+/i, '') : null;\r",
											"\r",
											"// Salva apenas o token limpo em variável de ambiente\r",
											"if (token) {\r",
											"    pm.globals.set(\"authTokenNaoAdmin\", token);\r",
											"    console.log(\"Token capturado (sem Bearer):\", token);\r",
											"} else {\r",
											"    console.warn(\"⚠️ Nenhum token encontrado no response.\");\r",
											"}\r",
											"//=========================================\r",
											"\r",
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Retorna o Status Code 200 Bad Request\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "dc1a1198-4f30-423d-8d15-d9ac31d0e735",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "name",
										"value": "Authorization",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{email_nAdm}}\",\r\n    \"password\": \"{{pass_nAdm}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/login?Name=Authorization ",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"login"
									],
									"query": [
										{
											"key": "Name",
											"value": "Authorization "
										},
										{
											"key": "In",
											"value": "header",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT002]Validar cadastro com usuário não Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3b675d4-bcc6-4c32-a01d-225d310ddcd1",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    pm.response.to.have.status(\"Forbidden\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Rota exclusiva para administradores\");\r",
											"});\r",
											"\r",
											"// Check response time is less than 300ms\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate the structure of the response body\r",
											"pm.test(\"Response body has the correct structure\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"    pm.expect(response.message).to.be.a('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ba008a19-c5f0-4c50-9be7-e94cfe131fd3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{authTokenNaoAdmin}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": {{$randomPrice}},\r\n    \"descricao\": \"{{$randomProduct}}\",\r\n    \"quantidade\": \"{{qde}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/produtos"
							},
							"response": []
						},
						{
							"name": "Cadastrar usuário Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c1d3283-8612-442d-a796-f24d61e3e9b8",
										"exec": [
											"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
											"let response = pm.response.json();\r",
											"let id = response._id;\r",
											"pm.globals.set(\"id_user_Adm\", id);\r",
											"\r",
											"\r",
											"//===========================================\r",
											"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
											"let requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Pegar campos específicos do body\r",
											"let username = requestBody.nome;\r",
											"let email = requestBody.email;\r",
											"let password = requestBody.password;\r",
											"let adm = requestBody.administrador;\r",
											"\r",
											"// Armazena em variáveis de ambiente\r",
											"pm.environment.set(\"nome_Adm\", username);\r",
											"pm.environment.set(\"email_Adm\", email);\r",
											"pm.environment.set(\"pass_Adm\", password);\r",
											"pm.environment.set(\"adm_Adm\", adm);\r",
											"\r",
											"// Log no console para conferir\r",
											"console.log(\"Nome salvo:\", username);\r",
											"console.log(\"Email salvo:\", email);\r",
											"console.log(\"Senha salvo:\", password);\r",
											"console.log(\"Admin salvo\", adm);\r",
											"//========================================================\r",
											"\r",
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"    pm.expect(pm.response.text()).to.include(\"_id\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7bd65298-a1cc-48b3-8c29-0f7e19f3bdc7",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "99918aaa-a359-4cab-b861-95261165dce1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios"
							},
							"response": []
						},
						{
							"name": "Logar com usuario Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed2063fa-c5b7-4393-a541-9323221ca1f5",
										"exec": [
											"// Converte o response em JSON\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Supondo que o token venha como \"Bearer xxxxxxx\"\r",
											"let rawToken = response.authorization;\r",
											"\r",
											"// Remove o prefixo \"Bearer \" se existir\r",
											"let token = rawToken ? rawToken.replace(/^Bearer\\s+/i, '') : null;\r",
											"\r",
											"// Salva apenas o token limpo em variável de ambiente\r",
											"if (token) {\r",
											"    pm.globals.set(\"authTokenAdmin\", token);\r",
											"    console.log(\"Token capturado (sem Bearer):\", token);\r",
											"} else {\r",
											"    console.warn(\"⚠️ Nenhum token encontrado no response.\");\r",
											"}\r",
											"//=========================================\r",
											"\r",
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Retorna o Status Code 200 Bad Request\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "37f6fa03-7908-46ca-905e-81f1989c41d6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "name",
										"value": "Authorization",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{email_Adm}}\",\r\n    \"password\": \"{{pass_Adm}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/login?Name=Authorization ",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"login"
									],
									"query": [
										{
											"key": "Name",
											"value": "Authorization "
										},
										{
											"key": "In",
											"value": "header",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT003]Validar cadastro com campos em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3b675d4-bcc6-4c32-a01d-225d310ddcd1",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
											"    pm.expect(pm.response.text()).to.include(\"preco deve ser um número\");\r",
											"    pm.expect(pm.response.text()).to.include(\"descricao não pode ficar em branco\");\r",
											"    pm.expect(pm.response.text()).to.include(\"quantidade deve ser um número\");\r",
											"});\r",
											"\r",
											"// Check response time is less than 300ms\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate that the response body has the expected properties\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response body has the expected properties\", function () {\r",
											"    pm.expect(response).to.have.all.keys('nome', 'preco', 'descricao', 'quantidade');\r",
											"});\r",
											"\r",
											"// Validate the specific error messages in the response body\r",
											"pm.test(\"Error messages are present in the response\", function () {\r",
											"    pm.expect(response.nome).to.equal(\"nome não pode ficar em branco\");\r",
											"    pm.expect(response.preco).to.equal(\"preco deve ser um número\");\r",
											"    pm.expect(response.descricao).to.equal(\"descricao não pode ficar em branco\");\r",
											"    pm.expect(response.quantidade).to.equal(\"quantidade deve ser um número\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "38743887-2bef-4a56-9d57-5e018b35a314",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{authTokenAdmin}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"\",\r\n    \"preco\": \"\",\r\n    \"descricao\": \"\",\r\n    \"quantidade\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/produtos"
							},
							"response": []
						},
						{
							"name": "[CT004]Validar cadastro com campo Nome em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3b675d4-bcc6-4c32-a01d-225d310ddcd1",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"// Parse response body\r",
											"const response = pm.response.json();\r",
											"\r",
											"// Check if response has 'nome' field\r",
											"pm.test(\"Response has 'nome' field\", function () {\r",
											"    pm.expect(response).to.have.property('nome');\r",
											"});\r",
											"\r",
											"// Check if 'nome' field is a string\r",
											"pm.test(\"'nome' field is a string\", function () {\r",
											"    pm.expect(response.nome).to.be.a('string');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "cd1e6f7b-9a8b-44a6-a26b-291c49ac31b7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{authTokenAdmin}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"\",\r\n    \"preco\": {{qde_gerada}},\r\n    \"descricao\": \"{{$randomProductMaterial}}\",\r\n    \"quantidade\": {{qde_gerada}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/produtos"
							},
							"response": []
						},
						{
							"name": "[CT005]Validar cadastro com campo Preço em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3b675d4-bcc6-4c32-a01d-225d310ddcd1",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"preco deve ser um número\");\r",
											"});\r",
											"\r",
											"// Check the response time is less than 500ms\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate the structure of the response body\r",
											"pm.test(\"Response body has required properties\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"preco\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e925f6b2-ddfc-403a-b1ba-d0fcd6e33ec1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{authTokenAdmin}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": \"\",\r\n    \"descricao\": \"{{$randomProductMaterial}}\",\r\n    \"quantidade\": {{qde_gerada}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/produtos"
							},
							"response": []
						},
						{
							"name": "[CT006]Validar cadastro com campo Descrição em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3b675d4-bcc6-4c32-a01d-225d310ddcd1",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"descricao não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response body structure\r",
											"pm.test(\"Response body has descricao property\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"descricao\");\r",
											"});\r",
											"\r",
											"// Validate descricao property is a string\r",
											"pm.test(\"descricao property is a string\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.descricao).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"// Check response time is within acceptable limit (e.g., less than 300ms)\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e997d6a4-5b72-4965-913a-8a80b6d13c53",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{authTokenAdmin}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": {{qde_gerada}},\r\n    \"descricao\": \"\",\r\n    \"quantidade\": {{qde_gerada}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/produtos"
							},
							"response": []
						},
						{
							"name": "[CT007]Validar cadastro com campo Qde em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3b675d4-bcc6-4c32-a01d-225d310ddcd1",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"quantidade deve ser um número\");\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Check that the response body is valid JSON\r",
											"pm.test(\"Response body is valid JSON\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Check that the response body contains the 'quantidade' field\r",
											"pm.test(\"Response body contains 'quantidade' field\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"quantidade\");\r",
											"});\r",
											"\r",
											"// Check that the 'quantidade' field is a string\r",
											"pm.test(\"'quantidade' field is a string\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.quantidade).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "2124478a-9ac6-4c50-a9df-42f8e66ca54e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{authTokenAdmin}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": {{qde_gerada}},\r\n    \"descricao\": \"{{$randomProductMaterial}}\",\r\n    \"quantidade\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/produtos"
							},
							"response": []
						},
						{
							"name": "[CT008]Validar cadastro de um produto com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3b675d4-bcc6-4c32-a01d-225d310ddcd1",
										"exec": [
											"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
											"let response = pm.response.json();\r",
											"let id = response._id;\r",
											"pm.globals.set(\"id_prod\", id);\r",
											"\r",
											"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
											"let requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Pegar campos específicos do body\r",
											"let product = requestBody.nome;\r",
											"let price = requestBody.preco;\r",
											"let description = requestBody.descricao;\r",
											"let qde = requestBody.quantidade;\r",
											"\r",
											"// Armazena em variáveis de ambiente\r",
											"pm.environment.set(\"name_prod\", product);\r",
											"pm.environment.set(\"price_prod\", price);\r",
											"pm.environment.set(\"desc_prod\", description);\r",
											"pm.environment.set(\"qde_prod\", qde);\r",
											"\r",
											"// Log no console para conferir\r",
											"console.log(\"Produto salvo:\", product);\r",
											"console.log(\"Preço salvo:\", price);\r",
											"console.log(\"Descrição salvo:\", description);\r",
											"console.log(\"Qde salvo\", qde);\r",
											"\r",
											"//=========================\r",
											"\r",
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "7d82db8b-4fb9-434d-9313-bf1a506d25f5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{authTokenAdmin}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": \"{{qde_gerada}}\",\r\n    \"descricao\": \"{{$randomProductMaterial}}\",\r\n    \"quantidade\": \"{{qde_gerada}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/produtos"
							},
							"response": []
						},
						{
							"name": "[CT009]Validar produto existente",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3b675d4-bcc6-4c32-a01d-225d310ddcd1",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Já existe produto com esse nome\");\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c088cec4-81dd-4589-83b4-4f569c1369b0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{authTokenAdmin}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name_prod}}\",\r\n    \"preco\": \"{{price_prod}}\",\r\n    \"descricao\": \"{{desc_prod}}\",\r\n    \"quantidade\": \"{{qde_prod}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/produtos"
							},
							"response": []
						}
					],
					"id": "60fabb72-717c-40af-9cec-fc5b2168f32e",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "18fe55ab-7690-40a4-9a4c-e637fe586212",
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3ee4ff75-6116-4801-87cc-3947c549dd5a",
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Buscar",
					"item": [
						{
							"name": "Buscar com usuário não Admin",
							"item": [
								{
									"name": "Cadastrar usuário não Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c1d3283-8612-442d-a796-f24d61e3e9b8",
												"exec": [
													"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
													"let response = pm.response.json();\r",
													"let id = response._id;\r",
													"pm.environment.set(\"id_user_nAdm\", id);\r",
													"\r",
													"\r",
													"//===========================================\r",
													"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
													"let requestBody = JSON.parse(pm.request.body.raw);\r",
													"\r",
													"// Pegar campos específicos do body\r",
													"let username = requestBody.nome;\r",
													"let email = requestBody.email;\r",
													"let password = requestBody.password;\r",
													"let adm = requestBody.administrador;\r",
													"\r",
													"// Armazena em variáveis de ambiente\r",
													"pm.environment.set(\"nome_nAdm\", username);\r",
													"pm.environment.set(\"email_nAdm\", email);\r",
													"pm.environment.set(\"pass_nAdm\", password);\r",
													"pm.environment.set(\"adm_nAdm\", adm);\r",
													"\r",
													"// Log no console para conferir\r",
													"console.log(\"Nome salvo:\", username);\r",
													"console.log(\"Email salvo:\", email);\r",
													"console.log(\"Senha salvo:\", password);\r",
													"console.log(\"Admin salvo\", adm);\r",
													"//========================================================\r",
													"\r",
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
													"    pm.expect(pm.response.text()).to.include(\"_id\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7bd65298-a1cc-48b3-8c29-0f7e19f3bdc7",
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "c17628e9-ed42-44ce-93a5-11a5fd27305f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"false\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{URL_ServerRest}}/usuarios"
									},
									"response": []
								},
								{
									"name": "Logar com usuario não Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed2063fa-c5b7-4393-a541-9323221ca1f5",
												"exec": [
													"// Converte o response em JSON\r",
													"let response = pm.response.json();\r",
													"\r",
													"// Supondo que o token venha como \"Bearer xxxxxxx\"\r",
													"let rawToken = response.authorization;\r",
													"\r",
													"// Remove o prefixo \"Bearer \" se existir\r",
													"let token = rawToken ? rawToken.replace(/^Bearer\\s+/i, '') : null;\r",
													"\r",
													"// Salva apenas o token limpo em variável de ambiente\r",
													"if (token) {\r",
													"    pm.globals.set(\"authTokenNaoAdmin\", token);\r",
													"    console.log(\"Token capturado (sem Bearer):\", token);\r",
													"} else {\r",
													"    console.warn(\"⚠️ Nenhum token encontrado no response.\");\r",
													"}\r",
													"//=========================================\r",
													"\r",
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Retorna o Status Code 200 Bad Request\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\")\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b5a37070-a5f1-4f96-a1f2-d63c00252dcc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "name",
												"value": "Authorization",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{email_nAdm}}\",\r\n    \"password\": \"{{pass_nAdm}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_ServerRest}}/login?Name=Authorization ",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"login"
											],
											"query": [
												{
													"key": "Name",
													"value": "Authorization "
												},
												{
													"key": "In",
													"value": "header",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cadastrar um produto",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3b675d4-bcc6-4c32-a01d-225d310ddcd1",
												"exec": [
													"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
													"let response = pm.response.json();\r",
													"let id = response._id;\r",
													"pm.environment.set(\"id_prod\", id);\r",
													"\r",
													"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
													"let requestBody = JSON.parse(pm.request.body.raw);\r",
													"\r",
													"// Pegar campos específicos do body\r",
													"let product = requestBody.nome;\r",
													"let price = requestBody.preco;\r",
													"let description = requestBody.descricao;\r",
													"let qde = requestBody.quantidade;\r",
													"\r",
													"// Armazena em variáveis de ambiente\r",
													"pm.environment.set(\"name_prod\", product);\r",
													"pm.environment.set(\"price_prod\", price);\r",
													"pm.environment.set(\"desc_prod\", description);\r",
													"pm.environment.set(\"qde_prod\", qde);\r",
													"\r",
													"// Log no console para conferir\r",
													"console.log(\"Produto salvo:\", product);\r",
													"console.log(\"Preço salvo:\", price);\r",
													"console.log(\"Descrição salvo:\", description);\r",
													"console.log(\"Qde salvo\", qde);\r",
													"\r",
													"//=========================\r",
													"\r",
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
													"});\r",
													"\r",
													"// Check content type of the response\r",
													"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9a197916-9978-42c4-bbf9-6eafd7d99f97",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{authTokenNaoAdmin}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": \"{{qde_gerada}}\",\r\n    \"descricao\": \"{{$randomProductMaterial}}\",\r\n    \"quantidade\": \"{{qde_gerada}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{URL_ServerRest}}/produtos"
									},
									"response": []
								},
								{
									"name": "[CT001]Buscar produto nao cadastrado",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b87a7663-deef-4846-86f2-77699bb0d170",
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Produto não encontrado\");\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Response body has expected structure\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.have.all.keys('message');\r",
													"    pm.expect(response.message).to.be.a('string');\r",
													"});\r",
													"\r",
													"// Check content type of the response\r",
													"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "fd49259e-fdd2-4a1a-aa1e-8bbd57b895c2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{authTokenNaoAdmin}}"
											}
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "{{URL_ServerRest}}/produtos/fKVxggRtJiudPGfF"
									},
									"response": []
								},
								{
									"name": "[CT002]Buscar produto com dados invalidos",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c3263dc-68d0-44fb-a911-6a9ee289ee55",
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"id deve ter exatamente 16 caracteres alfanuméricos\");\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Response body has expected structure\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.have.all.keys('id');\r",
													"});\r",
													"\r",
													"// Check content type of the response\r",
													"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "194cdba1-e8a2-4997-8ec5-92b2352785c8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{authTokenNaoAdmin}}"
											}
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "{{URL_ServerRest}}/produtos/Adcf@124"
									},
									"response": []
								},
								{
									"name": "[CT003]Buscar por ID do produto",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "09db83bd-173b-4660-96c1-6d8efbea7bfb",
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"id deve ter exatamente 16 caracteres alfanuméricos\");\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Response body has expected structure\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.have.all.keys('id');\r",
													"});\r",
													"\r",
													"// Check content type of the response\r",
													"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "95bdfb54-9513-41c8-8476-35ea414dbb0a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{authTokenNaoAdmin}}"
											}
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "{{URL_ServerRest}}/produtos/{{id_prod}}"
									},
									"response": []
								}
							],
							"id": "f9d9033a-fc56-4b87-b52b-9ece20d54498",
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "83ec729b-2518-4c99-88a0-54c74e304783",
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8b37053f-49fd-4903-bb3b-d25473401524",
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Buscar com usuario Admin",
							"item": [
								{
									"name": "Cadastrar usuário Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c1d3283-8612-442d-a796-f24d61e3e9b8",
												"exec": [
													"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
													"let response = pm.response.json();\r",
													"let id = response._id;\r",
													"pm.globals.set(\"id_user_Adm\", id);\r",
													"\r",
													"\r",
													"//===========================================\r",
													"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
													"let requestBody = JSON.parse(pm.request.body.raw);\r",
													"\r",
													"// Pegar campos específicos do body\r",
													"let username = requestBody.nome;\r",
													"let email = requestBody.email;\r",
													"let password = requestBody.password;\r",
													"let adm = requestBody.administrador;\r",
													"\r",
													"// Armazena em variáveis de ambiente\r",
													"pm.environment.set(\"nome_Adm\", username);\r",
													"pm.environment.set(\"email_Adm\", email);\r",
													"pm.environment.set(\"pass_Adm\", password);\r",
													"pm.environment.set(\"adm_Adm\", adm);\r",
													"\r",
													"// Log no console para conferir\r",
													"console.log(\"Nome salvo:\", username);\r",
													"console.log(\"Email salvo:\", email);\r",
													"console.log(\"Senha salvo:\", password);\r",
													"console.log(\"Admin salvo\", adm);\r",
													"//========================================================\r",
													"\r",
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
													"    pm.expect(pm.response.text()).to.include(\"_id\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7bd65298-a1cc-48b3-8c29-0f7e19f3bdc7",
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b3dc06a1-a79e-42ce-a833-62f279489091",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{URL_ServerRest}}/usuarios"
									},
									"response": []
								},
								{
									"name": "Logar com usuario não Admin Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed2063fa-c5b7-4393-a541-9323221ca1f5",
												"exec": [
													"// Converte o response em JSON\r",
													"let response = pm.response.json();\r",
													"\r",
													"// Supondo que o token venha como \"Bearer xxxxxxx\"\r",
													"let rawToken = response.authorization;\r",
													"\r",
													"// Remove o prefixo \"Bearer \" se existir\r",
													"let token = rawToken ? rawToken.replace(/^Bearer\\s+/i, '') : null;\r",
													"\r",
													"// Salva apenas o token limpo em variável de ambiente\r",
													"if (token) {\r",
													"    pm.globals.set(\"authTokenAdmin\", token);\r",
													"    console.log(\"Token capturado (sem Bearer):\", token);\r",
													"} else {\r",
													"    console.warn(\"⚠️ Nenhum token encontrado no response.\");\r",
													"}\r",
													"//=========================================\r",
													"\r",
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Retorna o Status Code 200 Bad Request\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\")\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "8fbfb347-dddb-47d0-913c-88b4561ae93a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "name",
												"value": "Authorization",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{email_Adm}}\",\r\n    \"password\": \"{{pass_Adm}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_ServerRest}}/login?Name=Authorization ",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"login"
											],
											"query": [
												{
													"key": "Name",
													"value": "Authorization "
												},
												{
													"key": "In",
													"value": "header",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cadastrar um produto Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3b675d4-bcc6-4c32-a01d-225d310ddcd1",
												"exec": [
													"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
													"let response = pm.response.json();\r",
													"let id = response._id;\r",
													"pm.environment.set(\"id_prod\", id);\r",
													"\r",
													"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
													"let requestBody = JSON.parse(pm.request.body.raw);\r",
													"\r",
													"// Pegar campos específicos do body\r",
													"let product = requestBody.nome;\r",
													"let price = requestBody.preco;\r",
													"let description = requestBody.descricao;\r",
													"let qde = requestBody.quantidade;\r",
													"\r",
													"// Armazena em variáveis de ambiente\r",
													"pm.environment.set(\"name_prod\", product);\r",
													"pm.environment.set(\"price_prod\", price);\r",
													"pm.environment.set(\"desc_prod\", description);\r",
													"pm.environment.set(\"qde_prod\", qde);\r",
													"\r",
													"// Log no console para conferir\r",
													"console.log(\"Produto salvo:\", product);\r",
													"console.log(\"Preço salvo:\", price);\r",
													"console.log(\"Descrição salvo:\", description);\r",
													"console.log(\"Qde salvo\", qde);\r",
													"\r",
													"//=========================\r",
													"\r",
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
													"});\r",
													"\r",
													"// Check content type of the response\r",
													"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "00337287-260c-44f4-8738-839acf699322",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{authTokenAdmin}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": \"{{qde_gerada}}\",\r\n    \"descricao\": \"{{$randomProductMaterial}}\",\r\n    \"quantidade\": \"{{qde_gerada}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{URL_ServerRest}}/produtos"
									},
									"response": []
								},
								{
									"name": "[CT001]Buscar por produto não cadastrado",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "09db83bd-173b-4660-96c1-6d8efbea7bfb",
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Produto não encontrado\");\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Response body has expected structure\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.have.all.keys('message');\r",
													"    pm.expect(response.message).to.be.a('string');\r",
													"});\r",
													"\r",
													"// Check content type of the response\r",
													"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1c7f324f-4a82-4e71-bc0b-b19a96332b80",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{authTokenAdmin}}"
											}
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "{{URL_ServerRest}}/produtos/fKVxggRtJiudPGfF"
									},
									"response": []
								},
								{
									"name": "[CT002]Buscar produto com dados invalidos",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c3263dc-68d0-44fb-a911-6a9ee289ee55",
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"id deve ter exatamente 16 caracteres alfanuméricos\");\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Response body has expected structure\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.have.all.keys('id');\r",
													"});\r",
													"\r",
													"// Check content type of the response\r",
													"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "00e600f3-94b5-4583-a81f-2bf2e31bd69e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{authTokenAdmin}}"
											}
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "{{URL_ServerRest}}/produtos/Adcf@124"
									},
									"response": []
								},
								{
									"name": "[CT003]Buscar produto por ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f212879a-2446-4311-b1f0-451f762348bd",
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"// Test for 'quantidade' being a number\r",
													"pm.test(\"'quantidade' is a number\", function () {\r",
													"    pm.expect(response.quantidade).to.be.a('integer');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "223092f4-359f-410b-95b7-fc9b0d8550d7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{authTokenAdmin}}"
											}
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "{{URL_ServerRest}}/produtos/{{id_prod}}"
									},
									"response": []
								}
							],
							"id": "25433950-0263-4b8c-b1ec-a4463d184284",
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "90ef6281-f424-43c2-b8e3-0ecb7063d24c",
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e9d9e063-e3a4-48a4-9b60-d5d4b1c687a5",
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"id": "59477c8b-0572-4a9f-beaf-4edf3ea0898b",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2240ef85-f17c-4a54-8164-0854a660b1fd",
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3e0a201c-c617-4cee-8292-115777a21f5c",
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Excluir",
					"item": [],
					"id": "ee76a526-4c41-49f3-a81f-f3567cb7a4f1"
				},
				{
					"name": "Editar",
					"item": [],
					"id": "4721c670-a624-4a7a-994c-80dabd803a19"
				}
			],
			"id": "82605781-27a2-4341-a8de-a561aa68681a",
			"description": "**Swagger**: [https://serverest.dev/#/Produtos](https://serverest.dev/#/Produtos)\n\n**Requisição**: GET / POST / DELETE / PUT\n\n**Descrição**: Consulte produtos cadastrados ou, como administrador, gerencie os produtos da loja.",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fc962024-9476-45a2-aa56-8e48dcaf503d",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fdded6c2-826e-42d6-a10c-0e53cfaf54d8",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Carrinho",
			"item": [
				{
					"name": "Cadastrar",
					"item": [
						{
							"name": "[CT001]Cadastrar produto com campos em branco",
							"id": "6d2de81f-e2d3-4d6b-8a98-993483c87b80",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"produtos\": [\r\n        {\r\n            \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n            \"quantidade\": 2\r\n        },\r\n        {\r\n            \"idProduto\": \"YaeJ455lz3k6kSIzA\",\r\n            \"quantidade\": 3\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/carrinhos"
							},
							"response": []
						}
					],
					"id": "77528057-eedb-47fc-8308-db671077067c",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "20c6ca32-bab0-4bf7-ac4b-6664154c081e",
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2edaccaa-63ab-42da-85d8-389a9dfd367c",
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Buscar",
					"item": [],
					"id": "5b019dcf-018b-437d-b7ae-093eb7bd1746"
				},
				{
					"name": "Excluir",
					"item": [],
					"id": "81693482-b4f9-4559-bd84-67243a9aace5"
				}
			],
			"id": "f2de5741-ccdc-46d1-bbcf-aeb8e1000afd",
			"auth": {
				"type": "bearer",
				"bearer": {
					"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3RlQHFhMDEuY29tIiwicGFzc3dvcmQiOiJ0ZXN0ZXFhMTIzNCIsImlhdCI6MTc1NzE5ODcxMiwiZXhwIjoxNzU3MTk5MzEyfQ.M0UKt4CADDBS-Lpf4VWDyDCF8boMwbco5gowmlnjpqE"
				}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "85410f21-2fae-4546-b2ba-91804e70fa28",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e0cf0697-ae91-400b-90e5-c3e5a2ed591d",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "fe8b5b8b-6236-4a99-87e6-dca173d1f041",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"//=================NAME=================\r",
					"// Lista de nomes aleatórios\r",
					"const names = [\"Lucas\", \"Ana\", \"Carlos\", \"Mariana\", \"João\", \"Isabela\", \"Pedro\", \"Lívia\", \"Felipe\", \"Rafaela\"];\r",
					"\r",
					"// Função para escolher um nome aleatório da lista\r",
					"function getRandomName() {\r",
					"    const index = Math.floor(Math.random() * names.length);\r",
					"    return names[index];\r",
					"}\r",
					"\r",
					"// Define a variável 'name' no ambiente\r",
					"pm.environment.set(\"name\", getRandomName());\r",
					"\r",
					"\r",
					"\r",
					"//=================NOME PRODUTO=================\r",
					"// Lista de nomes aleatórios\r",
					"const produtcs = [\"Maça\", \"Desinfetante\", \"Esponja de aço\", \"Cafe\", \"Feijao\", \"Arroz\", \"Macarrao\", \"Vassoura\", \"Dedtergente\", \"Sabonete\"];\r",
					"\r",
					"// Função para escolher um nome aleatório da lista\r",
					"function getRandomProducts() {\r",
					"    const index = Math.floor(Math.random() * products.length);\r",
					"    return products[index];\r",
					"}\r",
					"\r",
					"// Define a variável 'name' no ambiente\r",
					"pm.environment.set(\"products\", getRandomName());\r",
					"\r",
					"\r",
					"\r",
					"//=================EMAIL=================\r",
					"const domains = [\"example.com\", \"mail.com\", \"test.com\", \"fakeemail.com\"];\r",
					"\r",
					"// Função para gerar email aleatório com nome + número + domínio\r",
					"function getRandomEmail(name) {\r",
					"    const randomNum = Math.floor(Math.random() * 1000); // número de 0 a 999\r",
					"    const domain = domains[Math.floor(Math.random() * domains.length)];\r",
					"    return `${name.toLowerCase()}${randomNum}@${domain}`;\r",
					"}\r",
					"\r",
					"// Gerar e armazenar as variáveis\r",
					"const name = getRandomName();\r",
					"const email = getRandomEmail(name);\r",
					"\r",
					"pm.environment.set(\"name\", name);\r",
					"pm.environment.set(\"email\", email);\r",
					"\r",
					"\r",
					"\r",
					"//=================STATUS=================\r",
					"//RETONAR ACTIVE OU INACTIVE NO CAMPO STATUS\r",
					"function randomBoolean() {\r",
					"    return Math.random() < 0.5;\r",
					"}\r",
					"let status = randomBoolean() ? \"active\" : \"inactive\";\r",
					"pm.environment.set(\"status\", status);\r",
					"\r",
					"\r",
					"//=================SENHA=================\r",
					"//RETONAR SENHA COM 6 CARACTERES\r",
					"function generatePassword(length) {\r",
					"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';\r",
					"    let password = '';\r",
					"    for (let i = 0; i < length; i++) {\r",
					"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
					"    }\r",
					"    return password;\r",
					"}\r",
					"let senha = generatePassword(6);                //GERA A VARIAVEL NO POSTMAN\r",
					"pm.environment.set(\"senha_gerada\", senha);      //ARMAZENA EM VARIÁVEL DO POSTMAN\r",
					"\r",
					"\r",
					"//RETONAR ID COM 10 CARACTERES\r",
					"function generateIdProducts(length) {\r",
					"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"    let id = '';\r",
					"    for (let i = 0; i < length; i++) {\r",
					"        id += chars.charAt(Math.floor(Math.random() * chars.length));\r",
					"    }\r",
					"    return id;\r",
					"}\r",
					"let idProd = generatePassword(10);                 //GERA A VARIAVEL NO POSTMAN\r",
					"pm.environment.set(\"idProd_gerada\", idProd);      //ARMAZENA EM VARIÁVEL DO POSTMAN\r",
					"\r",
					"\r",
					"//=================PREÇO=================\r",
					"// Gera preços aleatória de 3 caracteres\r",
					"function generateQde(length) {\r",
					"    const chars = '0123456789';\r",
					"    let quantidade = '';\r",
					"    for (let i = 0; i < length; i++) {\r",
					"        quantidade += chars.charAt(Math.floor(Math.random() * chars.length));\r",
					"    }\r",
					"    return quantidade;\r",
					"}\r",
					"let qde = generateQde(3);                //GERA A VARIAVEL NO POSTMAN\r",
					"pm.environment.set(\"qde_gerada\", qde);     //ARMAZENA EM VARIÁVEL DO POSTMAN"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "5e5c342e-5623-437c-a5bb-4296283d8dec",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"//TEMPO DE RESPOSTA\r",
					"pm.test(\"Tempo de resposta deve ser <2seg\", function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
					"});"
				]
			}
		}
	]
}