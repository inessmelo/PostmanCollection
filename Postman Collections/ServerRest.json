{
	"info": {
		"_postman_id": "b830bc06-e941-4453-9c38-b27ff125e602",
		"name": "ServerRest",
		"description": "READ\n\n**O ServeRest é uma API REST gratuita que simula uma loja virtual com intuito de servir de material de estudos de testes de API.**\n\n**Não deixe de seguir o** [<b>autor do projeto</b>](https://github.com/PauloGoncalvesBH) **e deixar um star no repositório:** [<b>github.com/ServeRest/ServeRest</b>](https://github.com/ServeRest/ServeRest)\n\nEssa página documenta todas as rotas e como acessá-las. Para mais detalhes do ServeRest (como executar localmente utilizando Docker ou NPM, alterar timeout de autenticação, etc) acesse [o repositório do ServeRest](https://github.com/serverest/serverest).\n\nEstá utilizando Postman? Importe o [JSON do Swagger](https://raw.githubusercontent.com/ServeRest/ServeRest/trunk/docs/swagger.json) para ter acesso às collections.\n\nVai fazer teste de carga? Leia a seção '[Teste de Carga](https://github.com/ServeRest/ServeRest#teste-de-carga)'.\n\nMuito obrigado ♥ a todos que apoiam o projeto [financeiramente](https://opencollective.com/serverest#section-contributors) ou [com código, ideias e divulgação](https://github.com/ServeRest/ServeRest#contribuidores-), graças a vocês **mais de R$ 2000,00 foram doados para a ONG** [<b>Todas as letras</b>](https://todasasletras.org/) até o momento.\n\nO ServeRest possui um front, com status em beta, não deixe de conhecer: [front.serverest.dev](https://front.serverest.dev/).\n\nPrecisa de apoio? [Abra uma issue](https://github.com/ServeRest/ServeRest/issues) ou contate o mantenedor do projeto:\n\n[Paulo Gonçalves&nbsp;- Website](https://www.linkedin.com/in/paulo-goncalves/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "[CT001]Validar dados invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21e3bcc3-0c26-4635-a37f-40dbe3f2c79f",
								"exec": [
									"//RETORNO DO CODIGO E O STATUS\r",
									"pm.test(\"Status code retorna 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"//TEMPO DE RESPOSTA\r",
									"pm.test(\"Tempo de resposta deve ser <2seg\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//RETORNO DO RESPONSE\r",
									"pm.test(\"Exibe a msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Email e/ou senha inválidos\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1682b48f-5e40-4d42-8b4d-bec55fae590b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Name",
								"value": "Authorization",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"teste@qa.com\",\r\n    \"password\": \"abc123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL_ServerRest}}/login"
					},
					"response": []
				},
				{
					"name": "[CT002]]Validar campos em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed2063fa-c5b7-4393-a541-9323221ca1f5",
								"exec": [
									"//RETORNO DO CODIGO E O STATUS\r",
									"pm.test(\"Retorna o Status Code 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//TEMPO DE RESPOSTA\r",
									"pm.test(\"Tempo de resposta deve ser <2seg\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//RETORNO DO RESPONSE\r",
									"pm.test(\"Exibe a msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
									"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "11c56e4b-af3f-4535-98e2-110e654dfc6e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL_ServerRest}}/login"
					},
					"response": []
				},
				{
					"name": "[CT003]]Validar obrigatoriedade do campo email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45eb0795-951e-4091-b6a6-34246b1389cb",
								"exec": [
									"//RETORNO DO CODIGO E O STATUS\r",
									"pm.test(\"Retorna o Status Code 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//TEMPO DE RESPOSTA\r",
									"pm.test(\"Tempo de resposta deve ser <2seg\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//RETORNO DO RESPONSE\r",
									"pm.test(\"Exibe a msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f82b7be8-1417-431c-8bb1-e6e343054cb2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"1234567\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL_ServerRest}}/login"
					},
					"response": []
				},
				{
					"name": "[CT004]]Validar obrigatoriedade do campo password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed2063fa-c5b7-4393-a541-9323221ca1f5",
								"exec": [
									"//RETORNO DO CODIGO E O STATUS\r",
									"pm.test(\"Retorna o Status Code 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//TEMPO DE RESPOSTA\r",
									"pm.test(\"Tempo de resposta deve ser <2seg\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//RETORNO DO RESPONSE\r",
									"pm.test(\"Exibe a msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0d29c022-c3c9-4f97-8994-bae9bde8dc6f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"teste@teste.com\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL_ServerRest}}/login"
					},
					"response": []
				},
				{
					"name": "[CT005]]Validar obrigatoriedade do campo password Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed2063fa-c5b7-4393-a541-9323221ca1f5",
								"exec": [
									"//RETORNO DO CODIGO E O STATUS\r",
									"pm.test(\"Retorna o Status Code 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//TEMPO DE RESPOSTA\r",
									"pm.test(\"Tempo de resposta deve ser <2seg\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//RETORNO DO RESPONSE\r",
									"pm.test(\"Exibe a msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9b66d7b6-304e-4478-833a-86ef8c3167aa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"teste@teste.com\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL_ServerRest}}/login"
					},
					"response": []
				}
			],
			"id": "78ea72f6-7ea6-413b-82ff-a2a403facfa3",
			"description": "Autentique o seu usuário para montar um carrinho e, se for administrador, gerenciar os produtosEndFragment\n\nStartFragment\n\nInforme o valor de `Authorization` retornado na rota _/login_\n\nName: `Authorization`\n\nIn: `header`\n\nEndFragment",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d5773b47-49ee-4379-8e98-60fc935c92c9",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e1084175-6ad6-4970-b3b0-b62ff820883f",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": {
			"value": "Authorization",
			"key": "Authorization"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "320b113e-4d78-4a99-b991-95bb8d0d68b9",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "2502df2c-3307-47fa-afaa-ca17998a1ddf",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}