{
	"info": {
		"_postman_id": "b830bc06-e941-4453-9c38-b27ff125e602",
		"name": "ServerRest",
		"description": "READ\n\n**O ServeRest é uma API REST gratuita que simula uma loja virtual com intuito de servir de material de estudos de testes de API.**\n\n**Não deixe de seguir o** [<b>autor do projeto</b>](https://github.com/PauloGoncalvesBH) **e deixar um star no repositório:** [<b>github.com/ServeRest/ServeRest</b>](https://github.com/ServeRest/ServeRest)\n\nEssa página documenta todas as rotas e como acessá-las. Para mais detalhes do ServeRest (como executar localmente utilizando Docker ou NPM, alterar timeout de autenticação, etc) acesse [o repositório do ServeRest](https://github.com/serverest/serverest).\n\nEstá utilizando Postman? Importe o [JSON do Swagger](https://raw.githubusercontent.com/ServeRest/ServeRest/trunk/docs/swagger.json) para ter acesso às collections.\n\nVai fazer teste de carga? Leia a seção '[Teste de Carga](https://github.com/ServeRest/ServeRest#teste-de-carga)'.\n\nMuito obrigado ♥ a todos que apoiam o projeto [financeiramente](https://opencollective.com/serverest#section-contributors) ou [com código, ideias e divulgação](https://github.com/ServeRest/ServeRest#contribuidores-), graças a vocês **mais de R$ 2000,00 foram doados para a ONG** [<b>Todas as letras</b>](https://todasasletras.org/) até o momento.\n\nO ServeRest possui um front, com status em beta, não deixe de conhecer: [front.serverest.dev](https://front.serverest.dev/).\n\nPrecisa de apoio? [Abra uma issue](https://github.com/ServeRest/ServeRest/issues) ou contate o mantenedor do projeto:\n\n[Paulo Gonçalves&nbsp;- Website](https://www.linkedin.com/in/paulo-goncalves/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "[CT001]Validar dados invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21e3bcc3-0c26-4635-a37f-40dbe3f2c79f",
								"exec": [
									"//RETORNO DO CODIGO E O STATUS\r",
									"pm.test(\"Status code retorna 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"//RETORNO DO RESPONSE\r",
									"pm.test(\"Exibe a msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Email e/ou senha inválidos\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1682b48f-5e40-4d42-8b4d-bec55fae590b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Authorization ",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"teste@qa.com\",\r\n    \"password\": \"abc123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL_ServerRest}}/login"
					},
					"response": []
				},
				{
					"name": "[CT002]]Validar campos em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed2063fa-c5b7-4393-a541-9323221ca1f5",
								"exec": [
									"//RETORNO DO CODIGO E O STATUS\r",
									"pm.test(\"Retorna o Status Code 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//RETORNO DO RESPONSE\r",
									"pm.test(\"Exibe a msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
									"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "11c56e4b-af3f-4535-98e2-110e654dfc6e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization ",
								"value": "Authorization ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL_ServerRest}}/login"
					},
					"response": []
				},
				{
					"name": "[CT003]]Validar obrigatoriedade do campo email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45eb0795-951e-4091-b6a6-34246b1389cb",
								"exec": [
									"//RETORNO DO CODIGO E O STATUS\r",
									"pm.test(\"Retorna o Status Code 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//RETORNO DO RESPONSE\r",
									"pm.test(\"Exibe a msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f82b7be8-1417-431c-8bb1-e6e343054cb2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization ",
								"value": "Authorization ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"1234567\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL_ServerRest}}/login"
					},
					"response": []
				},
				{
					"name": "[CT004]]Validar obrigatoriedade do campo password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed2063fa-c5b7-4393-a541-9323221ca1f5",
								"exec": [
									"//RETORNO DO CODIGO E O STATUS\r",
									"pm.test(\"Retorna o Status Code 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//RETORNO DO RESPONSE\r",
									"pm.test(\"Exibe a msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0d29c022-c3c9-4f97-8994-bae9bde8dc6f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Authorization ",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"teste@teste.com\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL_ServerRest}}/login"
					},
					"response": []
				},
				{
					"name": "[CT005]]Validar email invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed2063fa-c5b7-4393-a541-9323221ca1f5",
								"exec": [
									"//RETORNO DO CODIGO E O STATUS\r",
									"pm.test(\"Retorna o Status Code 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//RETORNO DO RESPONSE\r",
									"pm.test(\"Exibe a msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email deve ser um email válido\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9b66d7b6-304e-4478-833a-86ef8c3167aa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Authorization ",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"teste#qa.com\",\r\n    \"password\": \"abc123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL_ServerRest}}/login"
					},
					"response": []
				},
				{
					"name": "[CT006]]Validar password invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed2063fa-c5b7-4393-a541-9323221ca1f5",
								"exec": [
									"//RETORNO DO CODIGO E O STATUS\r",
									"pm.test(\"Retorna o Status Code 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"//RETORNO DO RESPONSE\r",
									"pm.test(\"Exibe a msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Email e/ou senha inválidos\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "85c1ddf6-394d-4817-93e9-6861aae4b368",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"teste@qa.com\",\r\n    \"password\": \"a\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL_ServerRest}}/login",
							"host": [
								"{{URL_ServerRest}}"
							],
							"path": [
								"login"
							],
							"query": [
								{
									"key": "name",
									"value": "Authorization ",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT007]]Validar login com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed2063fa-c5b7-4393-a541-9323221ca1f5",
								"exec": [
									"//RETORNO DO CODIGO E O STATUS\r",
									"pm.test(\"Retorna o Status Code 200 Bad Request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//RETORNO DO RESPONSE\r",
									"pm.test(\"Exibe a msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "63753d94-9c19-4adc-9a11-3b20ca5b5cbd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "name",
								"value": "Authorization",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"teste@qa.com\",\r\n    \"password\": \"abc@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL_ServerRest}}/login?Name=Authorization &In=header",
							"host": [
								"{{URL_ServerRest}}"
							],
							"path": [
								"login"
							],
							"query": [
								{
									"key": "Name",
									"value": "Authorization "
								},
								{
									"key": "In",
									"value": "header"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "78ea72f6-7ea6-413b-82ff-a2a403facfa3",
			"description": "Autentique o seu usuário para montar um carrinho e, se for administrador, gerenciar os produtosEndFragment\n\nStartFragment\n\nInforme o valor de `Authorization` retornado na rota _/login_\n\nName: `Authorization`\n\nIn: `header`\n\nEndFragment",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "34f6cc86-381f-4553-b5ee-2765e5bb4dad",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e1a8dbd2-268c-4503-b0b1-1cda34e153d8",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Usuários",
			"item": [
				{
					"name": "Buscar",
					"item": [
						{
							"name": "[CT001]",
							"id": "94642a8d-6449-4ea0-8064-42fa8c004e3a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{URL_ServerRest}}/usuarios"
							},
							"response": []
						}
					],
					"id": "dd2ccb6d-1cf2-45f4-a80c-939773ea9c94"
				},
				{
					"name": "Cadastrar",
					"item": [
						{
							"name": "[CT001]Validar campos em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c1d3283-8612-442d-a796-f24d61e3e9b8",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
											"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
											"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");\r",
											"    pm.expect(pm.response.text()).to.include(\"administrador deve ser 'true' ou 'false'\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "28c1f3f3-741d-4662-b660-eea62b598c30",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"\",\r\n    \"email\": \"\",\r\n    \"password\": \"\",\r\n    \"administrador\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios"
							},
							"response": []
						},
						{
							"name": "[CT002]Validar obrigatoriedade do campo nome",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c1d3283-8612-442d-a796-f24d61e3e9b8",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "54a3b328-dcca-4667-8726-7cb0c5c866f5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha}}\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios"
							},
							"response": []
						},
						{
							"name": "[CT003]Validar obrigatoriedade do campo email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c1d3283-8612-442d-a796-f24d61e3e9b8",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c5fb0d39-da60-44ac-b378-eb2b0d2b8cea",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"\",\r\n    \"password\": \"{{senha}}\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios"
							},
							"response": []
						},
						{
							"name": "[CT004]Validar obrigatoriedade do campo password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c1d3283-8612-442d-a796-f24d61e3e9b8",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "90f8c718-2f5c-4cce-a7e0-326876cf975c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios"
							},
							"response": []
						},
						{
							"name": "[CT005]Validar obrigatoriedade do campo administrador",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c1d3283-8612-442d-a796-f24d61e3e9b8",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"administrador deve ser 'true' ou 'false'\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ee1acf2a-733a-411e-8386-5cb43b6ddfcd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha}}\",\r\n    \"administrador\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios"
							},
							"response": []
						},
						{
							"name": "New Request Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c1d3283-8612-442d-a796-f24d61e3e9b8",
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//TEMPO DE RESPOSTA\r",
											"pm.test(\"Tempo de resposta deve ser <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"    pm.expect(pm.response.text()).to.include(\"_id\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "98bad921-679b-4196-af49-a641001726a9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL_ServerRest}}/usuarios"
							},
							"response": []
						}
					],
					"id": "2544e1af-abb0-48d2-98dd-e0fd1757aa2d"
				},
				{
					"name": "Editar",
					"item": [],
					"id": "4c817c46-abe1-4312-85b7-4f9db9796733"
				},
				{
					"name": "Excluir",
					"item": [],
					"id": "38c92192-adb4-49a7-9777-02eb251ea614"
				}
			],
			"id": "a96d30f0-3826-4938-832a-a51539f23833"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "5c793bae-3a40-4644-bc23-49e014618a91",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"//=================NAME=================\r",
					"// Lista de nomes aleatórios\r",
					"const names = [\"Lucas\", \"Ana\", \"Carlos\", \"Mariana\", \"João\", \"Isabela\", \"Pedro\", \"Lívia\", \"Felipe\", \"Rafaela\"];\r",
					"\r",
					"// Função para escolher um nome aleatório da lista\r",
					"function getRandomName() {\r",
					"    const index = Math.floor(Math.random() * names.length);\r",
					"    return names[index];\r",
					"}\r",
					"\r",
					"// Define a variável 'name' no ambiente\r",
					"pm.environment.set(\"name\", getRandomName());\r",
					"\r",
					"\r",
					"\r",
					"//=================EMAIL=================\r",
					"const domains = [\"example.com\", \"mail.com\", \"test.com\", \"fakeemail.com\"];\r",
					"\r",
					"// Função para gerar email aleatório com nome + número + domínio\r",
					"function getRandomEmail(name) {\r",
					"    const randomNum = Math.floor(Math.random() * 1000); // número de 0 a 999\r",
					"    const domain = domains[Math.floor(Math.random() * domains.length)];\r",
					"    return `${name.toLowerCase()}${randomNum}@${domain}`;\r",
					"}\r",
					"\r",
					"// Gerar e armazenar as variáveis\r",
					"const name = getRandomName();\r",
					"const email = getRandomEmail(name);\r",
					"\r",
					"pm.environment.set(\"name\", name);\r",
					"pm.environment.set(\"email\", email);\r",
					"\r",
					"\r",
					"\r",
					"//=================STATUS=================\r",
					"//RETONAR ACTIVE OU INACTIVE NO CAMPO STATUS\r",
					"function randomBoolean() {\r",
					"    return Math.random() < 0.5;\r",
					"}\r",
					"let status = randomBoolean() ? \"active\" : \"inactive\";\r",
					"pm.environment.set(\"status\", status);\r",
					"\r",
					"\r",
					"\r",
					"//=================GENDER=================\r",
					"//RETONAR MALE OU FEMALE NO CAMPO GENDER\r",
					"function randomBoolean() {\r",
					"    return Math.random() < 0.5;\r",
					"}\r",
					"let gender = randomBoolean() ? \"male\" : \"female\";\r",
					"pm.environment.set(\"gender\", gender);\r",
					"\r",
					"\r",
					"//=================SENHA=================\r",
					"//RETONAR SENHA COM 6 CARACTERES\r",
					"// Gera senha aleatória de 6 caracteres\r",
					"function generatePassword(length) {\r",
					"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';\r",
					"    let password = '';\r",
					"    for (let i = 0; i < length; i++) {\r",
					"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
					"    }\r",
					"    return password;\r",
					"}\r",
					"let senha = generatePassword(6);                //GERA A VARIAVEL NO POSTMAN\r",
					"pm.environment.set(\"senha_gerada\", senha);      //ARMAZENA EM VARIÁVEL DO POSTMAN\r",
					"console.log(\"Senha gerada:\", senha);            //MOSTRA NO CONSEOLE\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "12e8459b-b5f0-4bcf-9b22-15f50924d743",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"//TEMPO DE RESPOSTA\r",
					"pm.test(\"Tempo de resposta deve ser <2seg\", function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
					"});"
				]
			}
		}
	]
}